{"map":"{\"version\":3,\"sources\":[\"/Users/haoyi/Desktop/search-app/src/components/SearchForm.js\",\"/Users/haoyi/Desktop/search-app/src/components/Results.js\",\"/Users/haoyi/Desktop/search-app/src/App.js\",\"/Users/haoyi/Desktop/search-app/src/serviceWorker.js\",\"/Users/haoyi/Desktop/search-app/src/index.js\"],\"names\":[\"SearchForm\",\"react_default\",\"a\",\"createElement\",\"Form\",\"inline\",\"FormGroup\",\"controlId\",\"FormControl\",\"type\",\"placeholder\",\"Button\",\"Results\",\"Container\",\"Row\",\"ListGroup\",\"Item\",\"href\",\"active\",\"disabled\",\"App\",\"Jumbotron\",\"components_SearchForm\",\"components_Results\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"4RAoBeA,EAXI,WAAA,OAClBC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,QAAM,GACVJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAWC,UAAU,mBACnBN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAaC,KAAK,SAASC,YAAY,wBAExC,IACDT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAQF,KAAK,UAAb,oCCQYG,EAfC,WAAA,OACfX,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACCZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,KACAb,EAAAC,EAAAC,cAAA,KAAA,KAAA,kBAEAF,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACEd,EAAAC,EAAAC,cAACY,EAAA,EAAUC,KAAX,CAAgBC,KAAK,IAAIC,QAAM,GAA/B,UACAjB,EAAAC,EAAAC,cAACY,EAAA,EAAUC,KAAX,CAAgBC,KAAK,KAArB,UACAhB,EAAAC,EAAAC,cAACY,EAAA,EAAUC,KAAX,CAAgBC,KAAK,IAAIE,UAAQ,GAAjC,aCMWC,mLAdX,OACEnB,EAAAC,EAAAC,cAAA,MAAA,KACEF,EAAAC,EAAAC,cAACkB,EAAA,EAAD,KACEpB,EAAAC,EAAAC,cAAA,KAAA,KAAA,cACAF,EAAAC,EAAAC,cAAA,IAAA,KAAA,gCACAF,EAAAC,EAAAC,cAACmB,EAAD,OAGFrB,EAAAC,EAAAC,cAACoB,EAAD,cAVUC,EAAAA,WCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,EAAAA,EAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React from 'react';\\nimport {\\n\\tForm,\\n\\tFormGroup,\\n\\tFormControl,\\n\\tButton\\n} from 'react-bootstrap';\\n\\n\\t\\nconst SearchForm = () => (\\n\\t<Form inline>\\n\\t  <FormGroup controlId=\\\"formInlineEmail\\\">\\n\\t    <FormControl type=\\\"search\\\" placeholder=\\\"enter something...\\\" />\\n\\t  </FormGroup>\\n\\t  {' '}\\n\\t  <Button type=\\\"submit\\\">\\n\\t    search\\n\\t  </Button>\\n\\t</Form>\\n);\\nexport default SearchForm;\\n\",\"import React from 'react';\\nimport  {\\n\\tListGroup,\\n\\tContainer,\\n\\tRow,\\n} from 'react-bootstrap';\\n\\n\\nconst Results = () => (\\n\\t<Container>\\n\\t\\t<Row>\\n\\t\\t<h2>Results List </h2>\\n\\t\\t\\t\\t</Row>\\n\\t\\t<ListGroup>\\n\\t\\t  <ListGroup.Item href=\\\"#\\\" active>Link 1</ListGroup.Item>\\n\\t\\t  <ListGroup.Item href=\\\"#\\\">Link 2</ListGroup.Item>\\n\\t\\t  <ListGroup.Item href=\\\"#\\\" disabled>Link 3</ListGroup.Item>\\n\\t\\t</ListGroup>\\n\\n\\t</Container>\\n\\n);\\n\\nexport default Results;\",\"import React, { Component } from 'react';\\nimport {Jumbotron} from 'react-bootstrap';\\nimport SearchForm from './components/SearchForm';\\nimport Results from './components/Results'\\n\\n\\nclass App extends Component {\\n  render() {\\n    return (\\n      <div>\\n        <Jumbotron>\\n          <h1>Search App</h1>\\n          <p>This is a simple search app.</p>\\n          <SearchForm/>\\n\\n        </Jumbotron>\\n        <Results/>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport 'bootstrap/dist/css/bootstrap.css';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{26:function(e,t,n){e.exports=n(37)},34:function(e,t,n){},37:function(e,t,n){\"use strict\";n.r(t);var a=n(0),r=n.n(a),l=n(14),c=n.n(l),o=(n(32),n(34),n(15)),i=n(16),m=n(24),u=n(17),s=n(25),h=n(40),E=n(41),p=n(19),d=n(21),f=n(43),w=function(){return r.a.createElement(E.a,{inline:!0},r.a.createElement(p.a,{controlId:\"formInlineEmail\"},r.a.createElement(d.a,{type:\"search\",placeholder:\"enter something...\"})),\" \",r.a.createElement(f.a,{type:\"submit\"},\"search\"))},b=n(38),k=n(39),v=n(42),y=function(){return r.a.createElement(b.a,null,r.a.createElement(k.a,null,r.a.createElement(\"h2\",null,\"Results List \")),r.a.createElement(v.a,null,r.a.createElement(v.a.Item,{href:\"#\",active:!0},\"Link 1\"),r.a.createElement(v.a.Item,{href:\"#\"},\"Link 2\"),r.a.createElement(v.a.Item,{href:\"#\",disabled:!0},\"Link 3\")))},I=function(e){function t(){return Object(o.a)(this,t),Object(m.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(s.a)(t,e),Object(i.a)(t,[{key:\"render\",value:function(){return r.a.createElement(\"div\",null,r.a.createElement(h.a,null,r.a.createElement(\"h1\",null,\"Search App\"),r.a.createElement(\"p\",null,\"This is a simple search app.\"),r.a.createElement(w,null)),r.a.createElement(y,null))}}]),t}(a.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));c.a.render(r.a.createElement(I,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[26,2,1]]]);","extractedComments":[]}